#!/usr/bin/env ruby
# coding: utf-8

require 'optparse'
require 'pp'
require 'pathname'
require 'open3'
require 'yaml'

ARGV << '--help' if ARGV.empty?

opt = OptionParser.new.instance_eval {
  self.banner        = 'Usage: blog [options]'
  self.summary_width = 34

  defin = {
    "index [max_page_num]": "generate index.html",
    "generate <file path>": "generate page under repos into articles",
    "revision <revision>":  "specify gitrevisions (default: master)",
    "server [root_path]":   "launch web server",
    "port <ad:port>":       "bind address and port for webserver",
    "ws <ad:port>":         "bind address and port for websocket",
    "check <file_path>":    "check path",
    "fetch":                "fetch repositories"
  }

  opt = defin.inject({}){|h, (k,v)|
    o = k[/^(\w+)(?:(\s+.+))?$/, 1]
    on("-#{o[0]}#{$2}", "--#{o}#{$2}", v) do |val|
      h[o[0]] = val
    end

    h
  }

  parse(ARGV)
  opt
}

require_relative "../conf/conf"

case
  when opt.has_key?(?i)then
    require_relative "lib/fetch_repos"
    require_relative 'lib/utils/util'
    require_relative "lib/generate_index"
    Blog::Index.generate_index(opt[?i].to_i)

  when path = opt[?c] then
    require_relative "lib/generate_page"
    exit 1 unless valid_path?(path, opt[?r])

  when path = opt[?g] then
    require_relative "lib/generate_page"
    exit 1 unless ret = valid_path?(path, opt[?r])
    exit 1 unless generate_page(*ret, true)

  when opt.has_key?(?s) then
    require_relative "lib/server"
    launch(opt)

  when opt[?w] then
    require_relative 'lib/websocket'
    wsonly(opt)

  when opt[?f] then
    require_relative "lib/fetch_repos"
    require_relative 'lib/utils/util'
    Blog::Fetch.fetch_and_pull_repositories
end
